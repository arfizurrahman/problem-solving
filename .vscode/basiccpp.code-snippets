{
	// Place your problem-solving workspace snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and 
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope 
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is 
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are: 
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. 
	// Placeholders with the same ids are connected.
	// Example:
	// "Print to console": {
	// 	"scope": "javascript,typescript",
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }

	"BasicCpp": {
		"prefix": "basiccpp",
		"body": [
			"#include <bits/stdc++.h> ",
			" ",
			"using namespace std;",
			" ",
			"#define fast_cin() ios_base::sync_with_stdio(false); cin.tie(NULL); cout.tie(NULL)",
			" ",
			"#define INF (int)1e9",
			"#define PI 3.1415926535897932384626433832795",
			"#define MOD 1000000007",
			" ",
			"typedef long long ll;",
			"typedef unsigned long long ull;",
			"",
				"void solve(){",
			"}",
			"",
			"int main()",
			"{",
			"  #ifndef ONLINE_JUDGE",
			"    freopen(\"input.txt\", \"r\", stdin);",
			"    freopen(\"output.txt\", \"w\", stdout);",
		    "  #endif",
			"  fast_cin();",
			"  ll t;",
			"  cin >> t;",
			"  while (t--){",
			"	  solve();",
			"  }",
			"  return 0;",
			"}"
		],
		"description": "A basic cpp program"
	}
}